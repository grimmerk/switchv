// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VSWindow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) // workspace will update
  // 1. this project A only
  // 2. another space including this A project, so they will result in duplicate
  path      String
  closed    Boolean  @default(false) // VSCode deactivate, not really use now

  isSpace         Boolean    @default(false)
  embeddedWindows VSWindow[] @relation("SpaceEmbeddedWindows")

  spaceParentId Int?
  spaceParent   VSWindow? @relation("SpaceEmbeddedWindows", fields: [spaceParentId], references: [id], onDelete: Cascade)
  inSpace       Boolean   @default(false)

  name String?

  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#model

  @@unique([path, inSpace])
  @@index([updatedAt, path, closed, isSpace, spaceParentId, inSpace])
}

model User {
  id            Int     @id @default(autoincrement())
  workingFolder String?
}

model AIAssistantSettings {
  id                Int      @id @default(autoincrement())
  customPrompt      String? // Custom prompt template for ai_assistant
  apiKey            String? // User's Anthropic API key (optional, will use env if not set)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  leftClickBehavior String   @default("switch_window") // "switch_window" or "ai_assistant"
}

model Conversation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  sourceCode   String?   // Optional, used when conversation started from code analysis
  codeLanguage String?   // Language of the source code if applicable
  messages     Message[]
  isFromCode   Boolean   @default(false) // Flag indicating if conversation started from code
  initialMode  String    // Records the starting mode (INSIGHT_SPLIT, INSIGHT_CHAT, SMART_CHAT, etc.)
}

model Message {
  id             String       @id @default(uuid())
  content        String       // The actual message content
  role           String       // 'user', 'assistant', or 'system'
  timestamp      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
